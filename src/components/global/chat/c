import React from 'react';
import {
  BsChevronDoubleDown,
  BsChevronDoubleUp,
  BsEmojiLaughing,
  BsSendPlus,
} from 'react-icons/bs';
import ChatMessage from './message';
import UserChat from './user';

const dummyChatHistory = [
  {
    userId: 1,
    timestamp: '2023-09-18 10:15 AM',
    message: 'Hello, how can I help you?',
  },
  {
    userId: 2,
    timestamp: '2023-09-18 10:20 AM',
    message: 'I have a question about your products.',
  },
  {
    userId: 1,
    timestamp: '2023-09-18 10:22 AM',
    message: 'Sure, feel free to ask your question.',
  },
  {
    userId: 2,
    timestamp: '2023-09-18 10:25 AM',
    message: 'Do you offer free shipping?',
  },
  {
    userId: 1,
    timestamp: '2023-09-18 10:28 AM',
    message: 'Yes, we offer free shipping on orders over $50.',
  },
  {
    userId: 2,
    timestamp: '2023-09-18 10:30 AM',
    message: 'Great, thanks for the information!',
  },
];

const Chat = () => {
  const [status, setStatus] = React.useState<'Live' | 'Message'>('Message');
  const [minimize, setMinimize] = React.useState('450');
  const [editableContent, setEditableContent] = React.useState('');
  const [chatHistory, setChatHistory] = React.useState<any[]>(dummyChatHistory);

  const handleContentChange = () => {};
  const handleSendMessage = async () => {};

  const styles = {
    height: `${minimize}px`,
    transition: 'height 0.5s ease-in-out',
    transitionDelay: '0.2s',
  };

  return (
    <div className='fixed bottom-0 right-0 flex items-end h-0 text-black'>
      <div
        style={styles}
        className={`w-full md:w-[400px] border-[1px] mr-10 relative flex flex-col bottom-0 transition duration-1000 ease-out shadow-md rounded-t-lg bg-white`}
      >
        <div className='w-full border-b-[1px] flex items-center justify-between px-4 py-3.5 text-black'>
          <span className='font-bold'>{status}</span>

          <span className='cursor-pointer'>
            {minimize === '50' ? (
              <BsChevronDoubleUp onClick={() => setMinimize('450')} />
            ) : (
              <BsChevronDoubleDown onClick={() => setMinimize('50')} />
            )}
          </span>
        </div>
        <div className='flex-1 flex flex-col gap-2 p-4 overflow-y-auto bg-white'>
          {chatHistory.map((chatObject, index) => (
            <div key={index}>
              <UserChat
                userId={chatObject.userId}
                timestamp={chatObject.timestamp}
              />
              <ChatMessage message={chatObject.message} />
            </div>
          ))}
        </div>
        <div className='w-full px-4 mb-2'>
          <div className='w-full flex items-center gap-1 px-4 py-2 border-[1px] rounded-md bg-gray-50 max-h-20 relative'>
            <BsEmojiLaughing className='text-blue-500 text-xl' />
            <div
              className='min-h-[1rem] flex-1 max-h-20 w-full content-center outline-none relative overflow-y-auto'
              contentEditable
              onInput={handleContentChange}
            ></div>
            <BsSendPlus
              onClick={handleSendMessage}
              className='text-blue-500 text-xl'
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;


import React, { useState } from 'react';
import {
  BsChevronDoubleDown,
  BsChevronDoubleUp,
  BsEmojiLaughing,
  BsSendPlus,
} from 'react-icons/bs';
import ChatMessage from './message';
import UserChat from './user';
import ChatHead from './head';
import ChatSendButton from './send-button';
import ChatUserList from './user-list';
import axios from 'axios';

const dummyUserList = [
  { id: 1, name: 'User 1' },
  { id: 2, name: 'User 2' },
  { id: 3, name: 'User 3' },
  // Add more users as needed
];

const dummyChatHistory = {
  1: [
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
  ],
  2: [
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
  ],
  3: [
    {
      timestamp: '2023-09-18 10:22 AM',
      message: 'Sure, feel free to ask your question.',
    },
    {
      timestamp: '2023-09-18 10:22 AM',
      message: 'Sure, feel free to ask your question.',
    },
  ],
  4: [
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
    {
      timestamp: '2023-09-18 10:15 AM',
      message: 'Hello, how can I help you?',
    },
  ],
  5: [
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
    {
      timestamp: '2023-09-18 10:20 AM',
      message: 'I have a question about your products.',
    },
  ],
  6: [
    {
      timestamp: '2023-09-18 10:22 AM',
      message: 'Sure, feel free to ask your question.',
    },
    {
      timestamp: '2023-09-18 10:22 AM',
      message: 'Sure, feel free to ask your question.',
    },
    {
      timestamp: '2023-09-18 10:22 AM',
      message: 'Sure, feel free to ask your question.',
    },
  ],
};

const Chat = () => {
  const [status, setStatus] = useState<'Live' | 'Message'>('Message');
  const [minimize, setMinimize] = useState('450');
  const [editableContent, setEditableContent] = useState('');
  const [selectedUser, setSelectedUser] = useState({ id: '' });
  const [users, setUsers] = useState([]);
  const fetchUsers = async () => {
    const { data } = await axios.get('https://dummyjson.com/users');
    return data;
  };

  React.useEffect(() => {
    fetchUsers().then((users) => setUsers(users?.users));
  }, []);

  console.log('users', users);

  const handleContentChange = () => {};

  const handleSendMessage = async () => {};

  const styles = {
    height: `${minimize}px`,
    transition: 'height 0.5s ease-in-out',
    transitionDelay: '0.2s',
  };

  const handleUserSelection = (user: any) => {
    setSelectedUser(user);
  };

  const handleGoBack = () => {
    setSelectedUser({ id: '' }); // Deselect the user to return to the user list
  };

  return (
    <div className='fixed bottom-0 right-0 flex items-end h-0 text-black'>
      <div
        style={styles}
        className={`w-full md:w-[400px] border-[1px] mr-10 relative flex flex-col bottom-0 transition duration-1000 ease-out shadow-md rounded-t-lg bg-white`}
      >
        <ChatHead minimizeValue={minimize} setMinimizeValue={setMinimize} />
        <div className='flex-1 flex flex-col gap-2 p-4 overflow-y-auto bg-white'>
          {selectedUser ? (
            // Render chat area for the selected user here
            <div>
               <UserChat userId={selectedUser.id} timestamp={''} />
              {dummyChatHistory[selectedUser.id]?.map(
                (chatObject: any, index: number) => (
                  <div key={index}>
                    <ChatMessage message={chatObject.message} />
                  </div>
                )
              )}
              <button onClick={handleGoBack}>Go Back</button> 
            </div>
          ) : (
            // Render the list of users
            <div>
              {users.map((user, index) => (
                <ChatUserList
                  key={index}
                  user={user}
                  handleUserSelection={() => handleUserSelection(user)}
                />
              ))}
            </div>
          )}
        </div>
        <ChatSendButton
          handleContentChange={handleContentChange}
          handleSendMessage={handleSendMessage}
        />
      </div>
    </div>
  );
};

export default Chat;



User List
import React from 'react';

interface Props {
  user: any;
  handleUserSelection: (user: any) => void;
}

const ChatUserList = (props: Props) => {
  console.log(props);

  props.handleUserSelection(props.user);
  return <div className='cursor-pointer'>User List</div>;
};

export default ChatUserList;
